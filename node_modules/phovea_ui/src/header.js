/**
 * Created by Samuel Gratzl on 24.11.2014.
 */
import './_bootstrap';
import './_font-awesome';
import './style.scss';
import * as template from 'html-loader!./_header.html';
import { getAPIJSON } from 'phovea_core/src/ajax';
import { mixin } from 'phovea_core/src/index';
import * as $ from 'jquery';
import buildBuildInfo from './buildInfo';
/**
 * Header link extends the header link with a  flag for disabling the logo
 */
var AppHeaderLink = (function () {
    function AppHeaderLink(name, action, href, addLogo) {
        this.name = 'Caleydo Web';
        this.action = function () { return false; };
        this.href = '#';
        this.addLogo = true;
        if (name) {
            this.name = name;
        }
        if (action) {
            this.action = action;
        }
        if (href) {
            this.href = href;
        }
        if (addLogo) {
            this.addLogo = addLogo;
        }
    }
    return AppHeaderLink;
}());
export { AppHeaderLink };
/**
 * Helper function to create a list item for the header menus
 * @param name
 * @param action
 * @param href
 * @returns {HTMLElement}
 */
function createLi(name, action, href) {
    if (href === void 0) { href = '#'; }
    var li = document.createElement('li');
    li.innerHTML = "<a href=\"" + href + "\">" + name + "</a>";
    if (action) {
        li.querySelector('a').onclick = action;
    }
    return li;
}
/**
 * The Caleydo App Header provides an app name and customizable menus
 */
var AppHeader = (function () {
    /**
     * Constructor overrides the default options with the given options
     * @param parent
     * @param options
     */
    function AppHeader(parent, options) {
        if (options === void 0) { options = {}; }
        this.parent = parent;
        /**
         * Default options that can be overridden in the constructor
         * @private
         */
        this.options = {
            /**
             * insert as first-child or append as child node to the given parent node
             */
            prepend: true,
            /**
             * color scheme: bright (= false) or dark (= true)
             */
            inverse: false,
            /**
             * @DEPRECATED use `appLink.name` instead
             */
            //app: 'Caleydo Web',
            /**
             * @DEPRECATED use `appLink.addLogo` instead
             */
            //addLogo: true,
            /**
             * the app link with the app name
             */
            appLink: new AppHeaderLink(),
            /**
             * a list of links that should be shown in the main menu
             */
            mainMenu: [],
            /**
             * a list of links that should be shown in the right menu
             */
            rightMenu: [],
            /**
             * show/hide the options link
             */
            showOptionsLink: false,
            /**
             * show/hide the bug report link
             */
            showReportBugLink: true
        };
        mixin(this.options, options);
        this.build();
    }
    AppHeader.prototype.build = function () {
        var _this = this;
        // legacy support
        if (this.options.app !== undefined && this.options.appLink === undefined) {
            this.options.appLink.name = this.options.app;
        }
        if (this.options.addLogo !== undefined && !this.options.appLink === undefined) {
            this.options.appLink.addLogo = this.options.addLogo;
        }
        // create the content and copy it in the parent
        var helper = document.createElement('div');
        helper.innerHTML = String(template);
        while (helper.lastChild) {
            this.parent.insertBefore(helper.lastChild, this.parent.firstChild);
        }
        // use the inverse color scheme
        if (this.options.inverse) {
            this.parent.querySelector('nav.navbar').classList.add('navbar-inverse');
        }
        // modify app header link
        var appLink = this.parent.querySelector('*[data-header="appLink"]');
        appLink.innerHTML = this.options.appLink.name;
        appLink.onclick = this.options.appLink.action;
        appLink.setAttribute('href', this.options.appLink.href);
        if (this.options.appLink.addLogo) {
            appLink.classList.add('caleydo_app');
        }
        this.mainMenu = this.parent.querySelector('*[data-header="mainMenu"]');
        this.rightMenu = this.parent.querySelector('*[data-header="rightMenu"]');
        this.aboutDialog = this.parent.querySelector('*[data-header="about"]');
        this.optionsDialog = this.parent.querySelector('*[data-header="options"]');
        // show/hide links
        this.toggleOptionsLink(this.options.showOptionsLink);
        this.toggleAboutLink(true); // always visible
        this.toggleReportBugLink(this.options.showReportBugLink);
        // request last deployment data
        Promise.resolve(getAPIJSON("/last_deployment", {})).then(function (msg) {
            if (msg.timestamp) {
                _this.aboutDialog.querySelector('.lastDeployment span').textContent = new Date(msg.timestamp).toUTCString();
            }
        });
        this.options.mainMenu.forEach(function (l) { return _this.addMainMenu(l.name, l.action, l.href); });
        this.options.rightMenu.forEach(function (l) { return _this.addRightMenu(l.name, l.action, l.href); });
    };
    AppHeader.prototype.addMainMenu = function (name, action, href) {
        if (href === void 0) { href = '#'; }
        var li = createLi(name, action, href);
        this.mainMenu.appendChild(li);
        return li;
    };
    AppHeader.prototype.addRightMenu = function (name, action, href) {
        if (href === void 0) { href = '#'; }
        var li = createLi(name, action, href);
        this.rightMenu.insertBefore(li, this.rightMenu.firstChild);
        return li;
    };
    AppHeader.prototype.insertCustomMenu = function (element) {
        this.rightMenu.parentElement.insertBefore(element, this.rightMenu);
    };
    AppHeader.prototype.insertCustomRightMenu = function (element) {
        this.rightMenu.parentElement.appendChild(element);
    };
    AppHeader.prototype.wait = function () {
        AppHeader.setVisibility(document.querySelector('#headerWaitingOverlay'), true);
        //$('#headerWaitingOverlay').fadeIn();
    };
    AppHeader.prototype.ready = function () {
        AppHeader.setVisibility(document.querySelector('#headerWaitingOverlay'), false);
        //$('#headerWaitingOverlay').fadeOut();
    };
    AppHeader.setVisibility = function (element, isVisible) {
        if (isVisible) {
            element.classList.remove('hidden');
        }
        else {
            element.classList.add('hidden');
        }
    };
    AppHeader.prototype.toggleOptionsLink = function (isVisible) {
        var link = this.parent.querySelector('*[data-header="optionsLink"]');
        AppHeader.setVisibility(link, isVisible);
    };
    AppHeader.prototype.toggleReportBugLink = function (isVisible) {
        var _this = this;
        var link = this.parent.querySelector('*[data-header="bugLink"]');
        AppHeader.setVisibility(link, isVisible);
        // set the URL to GitHub issues dynamically
        if (isVisible) {
            $('#headerReportBugDialog').on('show.bs.modal', function () {
                var content = _this.parent.querySelector('*[data-header="bug"]');
                content.innerHTML = 'Loading...';
                buildBuildInfo().then(function (buildInfo) {
                    content.innerHTML = buildInfo.toHTML();
                }).catch(function (error) {
                    content.innerHTML = error.toString();
                });
            });
        }
    };
    AppHeader.prototype.toggleAboutLink = function (isVisible) {
        var link = this.parent.querySelector('*[data-header="aboutLink"]');
        AppHeader.setVisibility(link, isVisible);
    };
    return AppHeader;
}());
export { AppHeader };
export function create(parent, options) {
    if (options === void 0) { options = {}; }
    return new AppHeader(parent, options);
}
//# sourceMappingURL=header.js.map