var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/* *****************************************************************************
 * Caleydo - Visualization for Molecular Biology - http://caleydo.org
 * Copyright (c) The Caleydo Team. All rights reserved.
 * Licensed under the new BSD license, available at http://caleydo.org/license
 **************************************************************************** */
/**
 * Created by Samuel Gratzl on 04.08.2014.
 */
import { offline as isOffline, server_url, server_json_suffix } from '.';
var AjaxError = (function (_super) {
    __extends(AjaxError, _super);
    function AjaxError(response, message) {
        var _this = _super.call(this, message ? message : response.statusText) || this;
        _this.response = response;
        return _this;
    }
    return AjaxError;
}(Error));
function checkStatus(response) {
    if (response.ok) {
        return response;
    }
    else {
        throw new AjaxError(response);
    }
}
function parseType(expectedDataType, response) {
    switch (expectedDataType.trim().toLowerCase()) {
        case 'json':
        case 'application/json':
            return response.json();
        case 'text':
        case 'text/plain':
            return response.text();
        case 'blob':
            return response.blob();
        case 'formdata':
            return response.formData();
        case 'arraybuffer':
            return response.arrayBuffer();
        default:
            throw new AjaxError(response, "unknown expected data type: \"" + expectedDataType + "\"");
    }
}
/**
 * sends an XML http request to the server
 * @param url url
 * @param data arguments
 * @param method the http method
 * @param expectedDataType expected data type to return, in case of JSON it will be parsed using JSON.parse
 * @returns {Promise<any>}
 */
export function send(url, data, method, expectedDataType) {
    if (data === void 0) { data = {}; }
    if (method === void 0) { method = 'GET'; }
    if (expectedDataType === void 0) { expectedDataType = 'json'; }
    // for compatibility
    method = method.toUpperCase();
    // need to encode the body in the url in case of GET and HEAD
    if (method === 'GET' || method === 'HEAD') {
        data = encodeParams(data); //encode in url
        if (data) {
            url += (/\?/.test(url) ? '&' : '?') + data;
            data = null;
        }
    }
    var options = {
        credentials: 'same-origin',
        method: method,
        headers: {
            'Accept': 'application/json'
        },
    };
    if (data && !(data instanceof FormData)) {
        options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
        options.body = encodeParams(data);
    }
    else if (data) {
        options.body = data;
    }
    // there are no typings for fetch so far
    return self.fetch(url, options)
        .then(checkStatus)
        .then(parseType.bind(null, expectedDataType));
}
/**
 * to get some ajax json file
 * @param url
 * @param data
 * @returns {any}
 */
export function getJSON(url, data) {
    if (data === void 0) { data = {}; }
    return send(url, data);
}
/**
 * get some generic data via ajax
 * @param url
 * @param data
 * @param expectedDataType
 * @returns {any}
 */
export function getData(url, data, expectedDataType) {
    if (data === void 0) { data = {}; }
    if (expectedDataType === void 0) { expectedDataType = 'json'; }
    return send(url, data, 'get', expectedDataType);
}
/**
 * converts the given api url to an absolute with optional get parameters
 * @param url
 * @param data
 * @returns {string}
 */
export function api2absURL(url, data) {
    if (data === void 0) { data = null; }
    url = "" + server_url + url + server_json_suffix;
    data = encodeParams(data);
    if (data) {
        url += (/\?/.test(url) ? '&' : '?') + data;
    }
    return url;
}
/**
 * convert a given object to url data similar to JQuery
 * @param url
 * @param data
 * @returns {any}
 */
export function encodeParams(data) {
    if (data === void 0) { data = null; }
    if (data === null) {
        return null;
    }
    if (typeof data === 'string') {
        return encodeURIComponent(data);
    }
    var keys = Object.keys(data);
    if (keys.length === 0) {
        return null;
    }
    var s = [];
    function add(prefix, key, value) {
        if (Array.isArray(value)) {
            value.forEach(function (v, i) {
                if (typeof v === 'object') {
                    add(prefix, key + '[' + i + ']', v);
                }
                else {
                    //primitive values uses the same key
                    add(prefix, key + '[]', v);
                }
            });
        }
        else if (typeof value === 'object') {
            Object.keys(value).forEach(function (v) {
                add(prefix, key + '[' + v + ']', value[v]);
            });
        }
        else {
            s.push(encodeURIComponent(prefix + key) + '=' + encodeURIComponent(value));
        }
    }
    keys.forEach(function (key) {
        add('', key, data[key]);
    });
    // Return the resulting serialization
    return s.join('&').replace(/%20/g, '+');
}
function defaultOfflineGenerator() {
    return Promise.reject('offline');
}
function offline(generator, data) {
    if (data === void 0) { data = {}; }
    return Promise.resolve(typeof generator === 'function' ? generator(data) : generator);
}
/**
 * api version of send
 * @param url api relative url
 * @param data arguments
 * @param method http method
 * @param expectedDataType expected data type to return, in case of JSON it will be parsed using JSON.parse
 * @returns {Promise<any>}
 */
export function sendAPI(url, data, method, expectedDataType, offlineGenerator) {
    if (data === void 0) { data = {}; }
    if (method === void 0) { method = 'get'; }
    if (expectedDataType === void 0) { expectedDataType = 'json'; }
    if (offlineGenerator === void 0) { offlineGenerator = defaultOfflineGenerator; }
    if (isOffline) {
        return offline(offlineGenerator, data);
    }
    return send(api2absURL(url), data, method, expectedDataType);
}
/**
 * api version of getJSON
 * @param url api relative url
 * @param data arguments
 * @returns {Promise<any>}
 */
export function getAPIJSON(url, data, offlineGenerator) {
    if (data === void 0) { data = {}; }
    if (offlineGenerator === void 0) { offlineGenerator = defaultOfflineGenerator; }
    if (isOffline) {
        return offline(offlineGenerator, data);
    }
    return getJSON(api2absURL(url), data);
}
/**
 * api version of getData
 * @param url api relative url
 * @param data arguments
 * @param expectedDataType expected data type to return, in case of JSON it will be parsed using JSON.parse
 * @returns {Promise<any>}
 */
export function getAPIData(url, data, expectedDataType, offlineGenerator) {
    if (data === void 0) { data = {}; }
    if (expectedDataType === void 0) { expectedDataType = 'json'; }
    if (offlineGenerator === void 0) { offlineGenerator = function () { return defaultOfflineGenerator; }; }
    if (isOffline) {
        return offline(offlineGenerator, data);
    }
    return getData(api2absURL(url), data, expectedDataType);
}
//# sourceMappingURL=ajax.js.map